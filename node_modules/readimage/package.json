{
  "name": "readimage",
  "version": "1.1.1",
  "description": "Read an image (jpg, png, gif) into memory in the same format.",
  "main": "readimage.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "node test/"
  },
  "keywords": [
    "image",
    "jpg",
    "jpeg",
    "png",
    "gif",
    "read"
  ],
  "author": {
    "name": "Bryce B. Baril"
  },
  "license": "MIT",
  "dependencies": {
    "buffer-equal": "0.0.1",
    "isnumber": "^1.0.0",
    "jpeg-js": "0.0.4",
    "omggif": "^1.0.5",
    "pngparse": "^2.0.1"
  },
  "devDependencies": {
    "tape": "^2.14.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:revisitors/readimage.git"
  },
  "bugs": {
    "url": "https://github.com/revisitors/readimage/issues"
  },
  "homepage": "https://github.com/revisitors/readimage",
  "readme": "readimage\n=====\n\n[![NPM](https://nodei.co/npm/readimage.png)](https://nodei.co/npm/readimage/)\n\nRead an image into memory converting from whatever format it is in to a consistent set of RGBA frames independent on input format.\n\nWhy? Because image formats are a pain to worry about.\n\nHow fast is it? Not really sure. I don't need it to be fast.\n\nHow robust is it? Not really sure, if you have issues please file them!\n\n\n```javascript\n\nvar fs = require(\"fs\")\nvar readimage = require(\"readimage\")\n\nvar filedata = fs.readFileSync(\"cat.png\")\n\nreadimage(filedata, function (err, image) {\n  if (err) {\n    console.log(\"failed to parse the image\")\n    console.log(err)\n  }\n  console.log(image)\n})\n\n```\n\nAPI\n===\n\n`require(\"readimage\")(imageBuffer, callback)`\n---\n\nRead a buffer containing an image in PNG, GIF, or JPG format into a consistent RGBA format.\n\nFORMAT\n===\n\nheight, width, and an array of sequential frames. Non-animated images will have a single frame.\n\n```js\n{\n  height: 100, // pixels\n  width: 100, // pixels\n  frames: [\n    {\n      data: ... // RGBA buffer\n      delay: 100 // milliseconds before switching to next frame. OPTIONAL\n    },\n    {\n      data: ...\n      delay: 10\n    }\n  ]\n}\n```\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "readimage@1.1.1",
  "_from": "readimage@"
}
