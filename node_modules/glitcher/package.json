{
  "name": "glitcher",
  "version": "1.10.0",
  "description": "A tool for glitching images.",
  "main": "glitcher.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dependencies": {
    "color-rainbow": "0.0.0",
    "readimage": "~1.1.1",
    "tape": "~2.14.0",
    "writegif": "~1.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node test/"
  },
  "keywords": [
    "image",
    "glitch"
  ],
  "author": {
    "name": "Bryce B. Baril"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:revisitors/glitcher.git"
  },
  "jshintConfig": {
    "asi": true,
    "validthis": true,
    "eqnull": true,
    "node": true,
    "loopfunc": true,
    "newcap": false,
    "eqeqeq": false
  },
  "bugs": {
    "url": "https://github.com/revisitors/glitcher/issues"
  },
  "homepage": "https://github.com/revisitors/glitcher",
  "readme": "glitcher\n=====\n\n[![NPM](https://nodei.co/npm/glitcher.png)](https://nodei.co/npm/glitcher/)\n\nAn image glitching toolbox.\n\nRunning Examples\n================\n\nTo see demo output of API functions, clone this repository and then use `node` to run any of the files in the `examples/` folder.\n\nFor example, to run `flip.js`, change directories into the `examples/` folder, and then run `node flip.js`.\n\nExample files pull source images from the `img/` folder and then save their glitch transformations to the `output/` folder.\n\nAPI\n===\n\n`invertRGBA(buffer)`\n---\n\nInverts an RGBA buffer.\n\n`reverseRGBA(buffer)`\n---\n\nFlips (vertically) a RGBA buffer by reversing the pixels.\n\n`redBlueOverlay(buffer)`\n---\n\nOverlays red/blue channels from the first half of an RGBA buffer over the second half of an RGBA buffer.\n\n`clampColors(buffer[, maxColors])`\n---\n\nA slightly glitchy color clamp to `maxColors` (default 256).\n\n`glitchClamp(buffer[, maxColors])`\n---\n\nA randomizing color clamper. Randomizes a palette limited to `maxColors` (default 256).\n\n`ghostColors(buffer[, maxColors])`\n---\n\nA ghosting color palette -- the first `maxColors` (default 256) are processed, any colors outside the first set are assigned the same hue.\n\n`glitchGhost(buffer[, maxColors])`\n---\n\nA ghosting color palette -- the first `maxColors` (default 256) are processed, any other colors are assigned a hue from a randomly generated palette of `maxColors` hues.\n\n`grayscale(buffer)`\n---\n\nConvert a RGBA buffer to grayscale.\n\n`var shifted = pixelshift(buffer, pixels)`\n---\n\nShift an image in the x direction by `pixels`\n\n`rowslice(buffer, bandsize)`\n---\n\nSlice an image into rows of `bandsize` -- this is a raw value. Choose numbers somewhere on the order of the image height * width for best results. A small value will generally turn your image into noise.\n\n`cloneChannel(sourceBuffer, targetBuffer, channel)`\n---\n\nCopy all pixels from channel `channel` (0-3) from source to target. Works best if the images are the same dimensions.\n\n`smear(buffer, smearwidth)`\n---\n\nSmear pixels by `smearwidth` to the right\n\n`smearChannel(buffer, channel, smearwidth)`\n---\n\nSmear `channel` for `smearwidth` pixels at a ttime.\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "glitcher@1.10.0",
  "_from": "glitcher@"
}
